## Lung Cancer using machine learning algorithms
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
from xgboost import XGBRegressor
from sklearn.model_selection 
import train_test_split
data = pd.read_csv('survey lung cancer.csv')
data.head()
features = ['GENDER', 'AGE', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY',
       'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE ', 'ALLERGY ', 'WHEEZING',
       'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH',
       'SWALLOWING DIFFICULTY', 'CHEST PAIN']
X = data[features]
y = data['LUNG_CANCER']
# Get list of categorical variables
s = (data.dtypes == 'object')
object_cols = list(s[s].index)

print("Categorical variables:")
print(object_cols)
X['Male'] = X['GENDER'].map({'M':1, 'F':0})
X_final = X.drop(columns='GENDER')
X_final.head()
from sklearn.preprocessing import LabelEncoder
LE = LabelEncoder()
LE = LE.fit(y)
encoded_y = LE.transform(y)
y_final = pd.DataFrame(encoded_y)
y_final.head()
X_train, X_valid, y_train, y_valid = train_test_split(X_final, y_final)
model = XGBRegressor()
model.fit(X_train, y_train)
from sklearn.metrics import mean_absolute_error

predictions = model.predict(X_valid)
print("Mean Absolute Error: " + str(mean_absolute_error(predictions, y_valid)))
from sklearn.feature_selection import mutual_info_regression

X_MI = X_final.copy()
y_MI = y_final.copy()

# Label encoding for categoricals
for colname in X_MI.select_dtypes("object"):
    X_MI[colname], _ = X_MI[colname].factorize()


discrete_features = X_MI.dtypes == int
def make_mi_scores(X, y, discrete_features):
    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features)
    mi_scores = pd.Series(mi_scores, name="MI Scores", index=X.columns)
    mi_scores = mi_scores.sort_values(ascending=False)
    return mi_scores

mi_scores = make_mi_scores(X_MI, y_MI.values.ravel(), discrete_features)
mi_scores
import matplotlib.pyplot as plt

def plot_mi_scores(scores):
    scores = scores.sort_values(ascending=True)
    width = np.arange(len(scores))
    ticks = list(scores.index)
    plt.barh(width, scores)
    plt.yticks(width, ticks)
    plt.title("Mutual Information Scores")


plt.figure(dpi=100, figsize=(8, 5))
plot_mi_scores(mi_scores)
import seaborn as sns
data_cancer = data[data['LUNG_CANCER']=='YES']
data_no_cancer = data[data['LUNG_CANCER']=='NO']

sns.kdeplot(data=data_cancer['AGE'], shade=True, label='Lung Cancer')
sns.kdeplot(data=data_no_cancer['AGE'], shade=True, label ='No Cancer')
plt.legend()
plt.title('Distribution of patient age with and without Lung Cancer')

print("Patients with Lung Cancer mean age", data_cancer['AGE'].mean())
print('Patients without Lung Cancer mean age', data_no_cancer['AGE'].mean())
